import os
from dotenv import load_dotenv
import google.generativeai as genai  # Google Generative AI Python SDK that contains methods and classes to interact with Google's generative AI models.
import streamlit as st
from PIL import Image
from utils import apply_css, initialize_session, get_model_name
from pathlib import Path
# ---------------------------------------------------
# 1. Initialize Environment
# ---------------------------------------------------

# Load environment variables from the .env file
load_dotenv()

# Quick Note of About Kisaan Saathi- Helper of our Farmers p:
# Inspired by the need to provide a farmer to know actual status of the harvested crop using advanced AI models,
# easy to understand conditions of harvested crop , possible treatment if any.

# ---------------------------------------------------
# 2. Configure API Key
# ---------------------------------------------------

# Set up your API key
GOOGLE_API_KEY = os.getenv('Google_Gemimi_Key')

if not GOOGLE_API_KEY:
    raise ValueError("No API key found. Please set GOOGLE_API_KEY in your .env file.")

# Configure Google Generative AI SDK with the API key
genai.configure(api_key=GOOGLE_API_KEY)

#--------------------ST.Parameter

# ---------------------------------------------------
# 3. Initialize Generative Model & Define Functions
# ---------------------------------------------------

# Initialize the Generative Model
model = genai.GenerativeModel("gemini-1.5-flash-8b")  # Initializes an instance of the GenerativeModel class from the genai SDK

def get_gemini_output(input_prompt, image):
    """
    Sends the input prompt and image data to Gemini and retrieves the response.
    
    Args:
        input_prompt (str): The prompt instructing the AI on how to understand a uploaded crop image .
        image (list): A list containing image data prepared for the API call.
    
    Returns:
        str: The text response generated by the AI model.
    """
    response = model.generate_content([input_prompt, image[0]])
    return response.text

def get_image_details(uploaded_file):
    """
    Processes the uploaded image file and prepares it for the API call.
    
    Args:
        uploaded_file (UploadedFile): The image file uploaded by the user.
    
    Returns:
        list: A list of dictionaries containing MIME type and image data.
    
    Raises:
        FileNotFoundError: If no file is uploaded.
    """
    fileType = Path(uploaded_file.name).suffix
    if uploaded_file is not None:
        if(fileType==".png" or fileType==".jpg" or  fileType==".jpeg"  or fileType==".gif"):
            image_byte_data = uploaded_file.getvalue()
            image_parts = [{
                "mime_type": uploaded_file.type,
                "data": image_byte_data
            }]
            return image_parts
    else:
        raise FileNotFoundError("File not uploaded")

# ---------------------------------------------------
# 4. Streamlit Interface Setup
# ---------------------------------------------------

# Configure Streamlit Page
st.set_page_config(page_title="Kisaan Saathi ", layout="centered")
initialize_session()
st.sidebar.title("Settings")
#st.session_state['dark_mode'] = st.sidebar.checkbox("Dark Mode", value=st.session_state['dark_mode'])
model_choice = st.sidebar.selectbox(
        "Choose Model:",
        ["Gemini 1.5 Flash"]
    )
temperature = st.sidebar.slider("Temperature", 0.0, 1.0, 1.0)
top_p = st.sidebar.slider("Top P", 0.0, 1.0, 0.95)
top_k = st.sidebar.slider("Top K", 0, 100, 64)
max_output_tokens = st.sidebar.slider("Max Output Tokens", 1, 8192, 8192)
apply_css(st.session_state['dark_mode'])
#st.title("My Prescription")

# Display App Title
st.image("farmer.jpg")
st.markdown("<h2 style='color:green;vertical-align:top;'>Kisaan Saathi- Helper of our Farmers </h2>", unsafe_allow_html=True)

# Optional: Additional Inputs (Scene Type, Desired Feedback, etc.)
# For simplicity, we'll keep only the image upload in this example.

# Set Up Image Upload Interface
uploaded_file = st.file_uploader("Upload a Photo for Summarize a crop image ", type=["jpg", "png", "jpeg","gif"])
#fileExt=uploaded_file.name
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Crop Image ", use_container_width =True)

# ---------------------------------------------------
# 5. User Interaction & Summarize My Prescription
# ---------------------------------------------------

# Submit Button to Summarize My Prescription
submit = st.button("More About my Crop ")

# Define Summarize My Prescription Prompt


input_prompt="""This image contains a crop image .
At the end of note add disclaimer uploaded iven the crop image, describe the crop details first table and  
current condition of the crop as thoroughly as possible based on what you
see in the image, make sure to note all of the condtion of the crop and time left of harvest in days or months. Return output in second table format:
{description: description, features: [feature1, feature2, feature3, etc]}
In third table describe what is current status of the crop and if crop is not healthy what are the possible tretments like water required or not, recommanded pesticides,treatments,weed control etc .
""" 

if submit:
    try:
        
        # Handle Image Upload and Display
        image_data = get_image_details(uploaded_file)
        
        # Generate Summarize My Prescription
        response = get_gemini_output(input_prompt, image_data)
        
        # Display AI-Generated Summarize My Prescription
        st.subheader("More About Crop Image ")
        st.write(response)
       
        #genai.delete_file(uploaded_file.name)
    except FileNotFoundError as e:
        # Manage Errors: Prescription Not Uploaded
        st.error(str(e))
    except Exception as e:
        # Manage Errors: Other Exceptions
        st.error(f"An error occurred: {e}")
